# -*- mode: snippet; require-final-newline: nil -*-
# name: UVM component parameterized monitor
# key: uvc_p_mon
# group: UVC
# --

\`ifndef ${1:$(upcase yas-text)}_MONITOR__SV
 \`define ${1:$(upcase yas-text)}_MONITOR__SV

class ${1:`(get-pkg-name (get-buffer-name))`}_monitor#(
   ${2:parameters}
   )
   extends uvm_monitor;

   typedef $1_monitor#(${2:$(make-parameter-assign-list (parse-parameters yas-text))}) $1_monitor_t;
   typedef $1_config#(${2:$(make-parameter-assign-list (parse-parameters yas-text))}) $1_config_t;
   typedef $1_item#(${2:$(make-parameter-assign-list (parse-parameters yas-text))}) $1_item_t;
   typedef virtual $1_if#(${2:$(make-parameter-assign-list (parse-parameters yas-text))}) $1_vif_t;

  \`uvm_component_param_utils($1_monitor_t)

  $1_vif_t    vif;
  $1_config_t cfg;

  // The following two bits are used to control whether checks and coverage are
  // done both in the monitor class and the interface.
  bit checks_enable   = 0;
  bit coverage_enable = 0;

  uvm_analysis_port #($1_item_t) $1_port;

  // The following property holds the transaction information currently
  // begin captured (by the collect_address_phase and data_phase methods). 
  $1_item_t trans_collected;

  // Fields to hold trans addr, data and wait_state.
  // bit [15:0] addr;
  // bit [7:0] data;
  // int unsigned wait_state;

  // Transfer collected covergroup
  // covergroup cov_trans;
  //   option.per_instance = 1;
  //   trans_start_addr : coverpoint trans_collected.addr {
  //     option.auto_bin_max = 16; }
  //   trans_dir : coverpoint trans_collected.read_write;
  //   trans_size : coverpoint trans_collected.size {
  //     bins sizes[] = {1, 2, 4, 8};
  //     illegal_bins invalid_sizes = default; }
  //   trans_addrXdir : cross trans_start_addr, trans_dir;
  //   trans_dirXsize : cross trans_dir, trans_size;
  // endgroup : cov_trans

  // Transfer collected beat covergroup
  // covergroup cov_trans_beat;
  //   option.per_instance = 1;
  //   beat_addr : coverpoint addr {
  //     option.auto_bin_max = 16; }
  //   beat_dir : coverpoint trans_collected.read_write;
  //   beat_data : coverpoint data {
  //     option.auto_bin_max = 8; }
  //   beat_wait : coverpoint wait_state {
  //     bins waits[] = { [0:9] };
  //     bins others = { [10:$] }; }
  //   beat_addrXdir : cross beat_addr, beat_dir;
  //   beat_addrXdata : cross beat_addr, beat_data;
  // endgroup : cov_trans_beat

  // Provide implementations of virtual methods such as get_type_name and create
  // \`uvm_component_utils_begin($1_monitor)
  //   \`uvm_field_int(master_id, UVM_DEFAULT)
  //   \`uvm_field_int(checks_enable, UVM_DEFAULT)
  //   \`uvm_field_int(coverage_enable, UVM_DEFAULT)
  // \`uvm_component_utils_end

  // new - constructor
  function new (string name, uvm_component parent);
    super.new(name, parent);
    // cov_trans = new();
    // cov_trans.set_inst_name({get_full_name(), ".cov_trans"});
    // cov_trans_beat = new();
    // cov_trans_beat.set_inst_name({get_full_name(), ".cov_trans_beat"});
    // trans_collected = new();
    $1_port = new("$1_port", this);
  endfunction : new

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    if(!uvm_config_db#($1_config_t)::get(this, "", "$1_config", cfg))
       \`uvm_fatal("build",{"Config must be set for: ",get_full_name(),".$1_config"});
  endfunction: build_phase

  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    vif = cfg.vif;
  endfunction: connect_phase
  
  // run phase
  virtual task run_phase(uvm_phase phase);
    fork
      collect_transactions();
    join
  endtask : run_phase

  // collect_transactions
  virtual protected task collect_transactions();
    forever begin
      trans_collected = $1_item_t::type_id::create("trans_collected");
      // @(posedge vif.clk);
      // if (m_parent != null)
      //   trans_collected.master = m_parent.get_name();
      // collect_arbitration_phase();
      // collect_address_phase();
      // collect_data_phase();
      // \`uvm_info(get_full_name(), $sformatf("Transfer collected :\n%s",
      //   trans_collected.sprint()), UVM_MEDIUM)
      // if (checks_enable)
      //   perform_transfer_checks();
      // if (coverage_enable)
      //    perform_transfer_coverage();
      $1_port.write(trans_collected);
    end
  endtask : collect_transactions

  // collect_arbitration_phase
  // virtual protected task collect_arbitration_phase();
  //   @(posedge vif.sig_request[master_id]);
  //   @(posedge vif.clk iff vif.sig_grant[master_id] === 1);
  //   void'(this.begin_tr(trans_collected));
  // endtask : collect_arbitration_phase
  // 
  // // collect_address_phase
  // virtual protected task collect_address_phase();
  //   @(posedge vif.clk);
  //   trans_collected.addr = vif.sig_addr;
  //   case (vif.sig_size)
  //     2'b00 : trans_collected.size = 1;
  //     2'b01 : trans_collected.size = 2;
  //     2'b10 : trans_collected.size = 4;
  //     2'b11 : trans_collected.size = 8;
  //   endcase
  //   trans_collected.data = new[trans_collected.size];
  //   case ({vif.sig_read,vif.sig_write})
  //     2'b00 : trans_collected.read_write = NOP;
  //     2'b10 : trans_collected.read_write = READ;
  //     2'b01 : trans_collected.read_write = WRITE;
  //   endcase
  // endtask : collect_address_phase
  // 
  // // collect_data_phase
  // virtual protected task collect_data_phase();
  //   int i;
  //   if (trans_collected.read_write != NOP)
  //     for (i = 0; i < trans_collected.size; i++) begin
  //       @(posedge vif.clk iff vif.sig_wait === 0);
  //       trans_collected.data[i] = vif.sig_data;
  //     end
  //   this.end_tr(trans_collected);
  // endtask : collect_data_phase
  // 
  // // perform_transfer_checks
  // virtual protected function void perform_transfer_checks();
  //   check_transfer_size();
  //   check_transfer_data_size();
  // endfunction : perform_transfer_checks
  // 
  // // check_transfer_size
  // virtual protected function void check_transfer_size();
  //   assert_transfer_size : assert(trans_collected.size == 1 || 
  //     trans_collected.size == 2 || trans_collected.size == 4 || 
  //     trans_collected.size == 8) else begin
  //     \`uvm_error(get_type_name(),
  //       "Invalid transfer size!")
  //   end
  // endfunction : check_transfer_size
  // 
  // // check_transfer_data_size
  // virtual protected function void check_transfer_data_size();
  //   if (trans_collected.size != trans_collected.data.size())
  //     \`uvm_error(get_type_name(),
  //       "Transfer size field / data size mismatch.")
  // endfunction : check_transfer_data_size
  // 
  // // perform_transfer_coverage
  // virtual protected function void perform_transfer_coverage();
  //   cov_trans.sample();
  //   for (int unsigned i = 0; i < trans_collected.size; i++) begin
  //     addr = trans_collected.addr + i;
  //     data = trans_collected.data[i];
  //// Wait state is not currently monitored
  ////       wait_state = trans_collected.wait_state[i];
  //     cov_trans_beat.sample();
  //   end
  // endfunction : perform_transfer_coverage

  virtual function void report_phase(uvm_phase phase);
    // \`uvm_info(get_full_name(),$sformatf("Covergroup 'cov_trans' coverage: %2f",
	// 				cov_trans.get_inst_coverage()),UVM_LOW)
  endfunction

endclass : $1_monitor


\`endif // \`${1:$(upcase yas-text)}_MONITOR__SV