# -*- mode: snippet; require-final-newline: nil -*-
# name: UVM component parameterized base sequence
# key: uvc_p_base_seq
# group: UVC
# --

class ${1:`(get-pkg-name (get-buffer-name))`}_base_sequence#(
   ${2:parameters}
   )
   extends uvm_sequence#(${3:$1}_item#(${2:$(make-parameter-assign-list (parse-parameters yas-text))}));

   typedef $1_base_sequence#(${2:$(make-parameter-assign-list (parse-parameters yas-text))}) $1_base_sequence_t;
   typedef $1_config#(${2:$(make-parameter-assign-list (parse-parameters yas-text))}) $1_config_t;
   typedef $3_item#(${2:$(make-parameter-assign-list (parse-parameters yas-text))}) $3_item_t;
   
   \`uvm_object_param_utils($1_base_sequence_t)

   string scope_name = "";

   $1_config_t cfg;
   $0

   // declare a p_sequencer pointer to sequencer (optional if needed)
   \`uvm_declare_p_sequencer(uvm_sequencer#($3_item_t))

   function new(string name = "$1_base_sequence");
      super.new(name);
   endfunction : new

   // task pre_body();
   //    if(starting_phase != null)
   //      starting_phase.raise_objection(this,get_type_name());
   // endtask :  pre_body
   // 
   // task post_body();
   //    if(starting_phase != null)
   //      starting_phase.drop_objection(this,get_type_name());
   // endtask :  post_body
endclass : $1_base_sequence
